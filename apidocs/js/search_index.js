var search_data = {"index":{"searchIndex":["dir","grizzled","directory","fileutil","baddirectorytreekey","baddirectorytreevalue","fakeuri","fileiterator","includeexception","includesource","includer","ziputil","unzipmixin","unzipper","zipmixin","zipper","forwarder","stack","stackunderflowexception","string","template","templatebase","unixshellstringtemplate","variable","variablenotfoundexception","windowscmdstringtemplate","unix","user","wrapmany","<=>()","clear()","close()","each()","each_line()","eql?()","expand_path()","find_variable_ref()","find_variable_ref()","find_variable_ref()","forward_to()","get_variable()","handle_long_match()","handle_match()","handle_match()","handle_no_long_match()","handle_no_value()","hash()","inspect()","inspect()","is_empty?()","length()","make_directory_tree()","method_missing()","method_missing()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","path()","pop()","pop_all()","pre_sub()","pre_sub()","push()","run_as()","substitute()","substitute()","substitute()","substitute_variable()","to_a()","to_s()","unzip()","walk()","walk()","zip()","zip_file_entries()"],"longSearchIndex":["dir","grizzled","grizzled::directory","grizzled::fileutil","grizzled::fileutil::baddirectorytreekey","grizzled::fileutil::baddirectorytreevalue","grizzled::fileutil::fakeuri","grizzled::fileutil::fileiterator","grizzled::fileutil::includeexception","grizzled::fileutil::includesource","grizzled::fileutil::includer","grizzled::fileutil::ziputil","grizzled::fileutil::ziputil::unzipmixin","grizzled::fileutil::ziputil::unzipper","grizzled::fileutil::ziputil::zipmixin","grizzled::fileutil::ziputil::zipper","grizzled::forwarder","grizzled::stack","grizzled::stackunderflowexception","grizzled::string","grizzled::string::template","grizzled::string::template::templatebase","grizzled::string::template::unixshellstringtemplate","grizzled::string::template::variable","grizzled::string::template::variablenotfoundexception","grizzled::string::template::windowscmdstringtemplate","grizzled::unix","grizzled::unix::user","wrapmany","grizzled::stack#<=>()","grizzled::stack#clear()","grizzled::fileutil::includer#close()","grizzled::stack#each()","grizzled::fileutil::fileiterator#each_line()","grizzled::stack#eql?()","dir#expand_path()","grizzled::string::template::templatebase#find_variable_ref()","grizzled::string::template::unixshellstringtemplate#find_variable_ref()","grizzled::string::template::windowscmdstringtemplate#find_variable_ref()","grizzled::forwarder#forward_to()","grizzled::string::template::templatebase#get_variable()","grizzled::string::template::unixshellstringtemplate#handle_long_match()","grizzled::string::template::unixshellstringtemplate#handle_match()","grizzled::string::template::windowscmdstringtemplate#handle_match()","grizzled::string::template::unixshellstringtemplate#handle_no_long_match()","grizzled::string::template::templatebase#handle_no_value()","grizzled::stack#hash()","grizzled::stack#inspect()","grizzled::string::template::variable#inspect()","grizzled::stack#is_empty?()","grizzled::stack#length()","grizzled::fileutil#make_directory_tree()","grizzled::fileutil::fakeuri#method_missing()","grizzled::forwarder::method_missing()","wrapmany#method_missing()","grizzled::fileutil::baddirectorytreevalue::new()","grizzled::fileutil::fakeuri::new()","grizzled::fileutil::fileiterator::new()","grizzled::fileutil::includesource::new()","grizzled::fileutil::includer::new()","grizzled::stack::new()","grizzled::string::template::templatebase::new()","grizzled::string::template::unixshellstringtemplate::new()","grizzled::string::template::variable::new()","grizzled::string::template::windowscmdstringtemplate::new()","grizzled::unix::user::new()","wrapmany::new()","grizzled::fileutil::includer#path()","grizzled::stack#pop()","grizzled::stack#pop_all()","grizzled::string::template::unixshellstringtemplate#pre_sub()","grizzled::string::template::windowscmdstringtemplate#pre_sub()","grizzled::stack#push()","grizzled::unix::user#run_as()","grizzled::string::template::templatebase#substitute()","grizzled::string::template::unixshellstringtemplate#substitute()","grizzled::string::template::windowscmdstringtemplate#substitute()","grizzled::string::template::templatebase#substitute_variable()","grizzled::stack#to_a()","grizzled::string::template::variable#to_s()","grizzled::fileutil::ziputil::unzipmixin#unzip()","dir::walk()","grizzled::directory::walk()","grizzled::fileutil::ziputil::zipmixin#zip()","grizzled::fileutil::ziputil::unzipmixin#zip_file_entries()"],"info":[["Dir","","Dir.html","","<p>Miscellaneous additional directory-related modules and classes.\n"],["Grizzled","","Grizzled.html","","<p>Miscellaneous additional Ruby file utility modules and classes.\n<p>Provides a module which, when mixed in, …\n"],["Grizzled::Directory","","Grizzled/Directory.html","","<p>Useful directory-related methods.\n"],["Grizzled::FileUtil","","Grizzled/FileUtil.html","","<p>This module and its submodules contain various file-related utility\nmethods.\n"],["Grizzled::FileUtil::BadDirectoryTreeKey","","Grizzled/FileUtil/BadDirectoryTreeKey.html","","<p>Exception thrown for bad directory tree key.\n"],["Grizzled::FileUtil::BadDirectoryTreeValue","","Grizzled/FileUtil/BadDirectoryTreeValue.html","","<p>Exception thrown for a bad directory tree value.\n"],["Grizzled::FileUtil::FakeURI","","Grizzled/FileUtil/FakeURI.html","","<p>Internal fake URI\n"],["Grizzled::FileUtil::FileIterator","","Grizzled/FileUtil/FileIterator.html","","<p>Internal wrapper for multiple files\n"],["Grizzled::FileUtil::IncludeException","","Grizzled/FileUtil/IncludeException.html","","<p>Thrown when include file processing encounters errors.\n"],["Grizzled::FileUtil::IncludeSource","","Grizzled/FileUtil/IncludeSource.html","","<p>Internal container for source information.\n"],["Grizzled::FileUtil::Includer","","Grizzled/FileUtil/Includer.html","","<p>Introduction\n<p>An <code>Includer</code> object preprocesses a text file, resolve\n<em>include</em> references. The <code>Includer</code> is …\n"],["Grizzled::FileUtil::ZipUtil","","Grizzled/FileUtil/ZipUtil.html","","<p>Namespace module, containing contains some simplified, front-end “zip” and\n“unzip” …\n"],["Grizzled::FileUtil::ZipUtil::UnzipMixin","","Grizzled/FileUtil/ZipUtil/UnzipMixin.html","","<p><code>UnzipMixin</code> provides convenient front-end methods for unzipping\nfiles; it uses the &#39;rubyzip&#39; gem …\n"],["Grizzled::FileUtil::ZipUtil::Unzipper","","Grizzled/FileUtil/ZipUtil/Unzipper.html","","<p><code>Unzipper</code> is a class version of <code>UnzipMixin</code> and is\nuseful when you don&#39;t want to mix the methods directly …\n"],["Grizzled::FileUtil::ZipUtil::ZipMixin","","Grizzled/FileUtil/ZipUtil/ZipMixin.html","","<p><code>ZipMixin</code> provides convenient front-end methods for zipping\nfiles; it uses the &#39;rubyzip&#39; gem under …\n"],["Grizzled::FileUtil::ZipUtil::Zipper","","Grizzled/FileUtil/ZipUtil/Zipper.html","","<p><code>Zipper</code> is a class version of <code>ZipMixin</code> and is\nuseful when you don&#39;t want to mix the methods directly …\n"],["Grizzled::Forwarder","","Grizzled/Forwarder.html","","<p><code>Forwarder</code> makes it easy to forward calls to another object.\n<p>Examples:\n<p>Forward all unimplemented methods …\n"],["Grizzled::Stack","","Grizzled/Stack.html","","<p>A simple stack wrapper on top of a Ruby array, providing a little more\nprotection that using an array …\n"],["Grizzled::StackUnderflowException","","Grizzled/StackUnderflowException.html","","<p>Thrown for un-safe stacks if the stack\n"],["Grizzled::String","","Grizzled/String.html","",""],["Grizzled::String::Template","","Grizzled/String/Template.html","","<p>Grizzled::String::Template - A simple string templating solution modeled\nafter Python&#39;s <code>StringTemplate</code> …\n"],["Grizzled::String::Template::TemplateBase","","Grizzled/String/Template/TemplateBase.html","","<p>Base (abstract) class for a string template. Common logic is here.\nSubclasses implement specific methods. …\n"],["Grizzled::String::Template::UnixShellStringTemplate","","Grizzled/String/Template/UnixShellStringTemplate.html","","<p>A string template that uses the Unix shell-like syntax +${varname}+ (or\n+$varname+) for variable references. …\n"],["Grizzled::String::Template::Variable","","Grizzled/String/Template/Variable.html","","<p>What a parsed variable looks like.\n"],["Grizzled::String::Template::VariableNotFoundException","","Grizzled/String/Template/VariableNotFoundException.html","","<p>Exception raised for non-existent variables in non-safe templates.\n"],["Grizzled::String::Template::WindowsCmdStringTemplate","","Grizzled/String/Template/WindowsCmdStringTemplate.html","","<p>A string template that uses the Windows <code>cmd.exe</code> syntax\n+%varname%+ for variable references. A variable&#39;s …\n"],["Grizzled::Unix","","Grizzled/Unix.html","","<p>Unix-related OS things.\n"],["Grizzled::Unix::User","","Grizzled/Unix/User.html","","<p>A <code>User</code> object allows you to do things with Unix users, such as\n(for instance) run code as that user. …\n"],["WrapMany","","WrapMany.html","","<p>Adapted from gist.github.com/1120383\n<p>Wraps multiple objects in a single object. Method calls are resolved …\n"],["<=>","Grizzled::Stack","Grizzled/Stack.html#method-i-3C-3D-3E","(other)","<p>Compare this stack to another element.\n"],["clear","Grizzled::Stack","Grizzled/Stack.html#method-i-clear","()","<p>Clear the stack. Returns the stack, for chaining.\n"],["close","Grizzled::FileUtil::Includer","Grizzled/FileUtil/Includer.html#method-i-close","()","<p>Force the underlying resource to be closed.\n"],["each","Grizzled::Stack","Grizzled/Stack.html#method-i-each","()","<p>Yield each element of the stack, in turn. Unaffected by a change in the\nstack.\n"],["each_line","Grizzled::FileUtil::FileIterator","Grizzled/FileUtil/FileIterator.html#method-i-each_line","(&block)",""],["eql?","Grizzled::Stack","Grizzled/Stack.html#method-i-eql-3F","(other)","<p>Determine if this hash is equal to another one.\n"],["expand_path","Dir","Dir.html#method-i-expand_path","()","<p>Adds an <code>expand_path</code> convenience method to the standard Ruby\n<code>Dir</code> class.\n"],["find_variable_ref","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-i-find_variable_ref","(s)","<p>Parse the location of the first variable in the string. Subclasses should\noverride this method.\n<p>Parameters: …\n"],["find_variable_ref","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-find_variable_ref","(s)","<p>Parse the location of the first variable in the string. Subclasses should\noverride this method.\n<p>Parameters: …\n"],["find_variable_ref","Grizzled::String::Template::WindowsCmdStringTemplate","Grizzled/String/Template/WindowsCmdStringTemplate.html#method-i-find_variable_ref","(s)","<p>Parse the location of the first variable in the string. Subclasses should\noverride this method.\n<p>Parameters: …\n"],["forward_to","Grizzled::Forwarder","Grizzled/Forwarder.html#method-i-forward_to","(obj, exceptions=[])","<p>Forward all unimplemented method calls to <code>obj</code>, except those\nwhose symbols are listed in the <code>exceptions</code> …\n"],["get_variable","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-i-get_variable","(name, default)","<p>Get a variable&#39;s value, returning the empty string or throwing an\nexception, depending on the setting …\n"],["handle_long_match","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-handle_long_match","(m)",""],["handle_match","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-handle_match","(m, s)",""],["handle_match","Grizzled::String::Template::WindowsCmdStringTemplate","Grizzled/String/Template/WindowsCmdStringTemplate.html#method-i-handle_match","(m, s)",""],["handle_no_long_match","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-handle_no_long_match","(s)",""],["handle_no_value","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-i-handle_no_value","(default, name)",""],["hash","Grizzled::Stack","Grizzled/Stack.html#method-i-hash","()","<p>Return the stack&#39;s hash.\n"],["inspect","Grizzled::Stack","Grizzled/Stack.html#method-i-inspect","()","<p>Printable version.\n"],["inspect","Grizzled::String::Template::Variable","Grizzled/String/Template/Variable.html#method-i-inspect","()",""],["is_empty?","Grizzled::Stack","Grizzled/Stack.html#method-i-is_empty-3F","()","<p>Convenience method for +length == 0+.\n"],["length","Grizzled::Stack","Grizzled/Stack.html#method-i-length","()","<p>Returns the size of the stack.\n"],["make_directory_tree","Grizzled::FileUtil","Grizzled/FileUtil.html#method-i-make_directory_tree","(directory, tree)","<p>Create a file/directory hierarchy. The hash table specifies the entries,\nusing the following rules.\n<p>A …\n"],["method_missing","Grizzled::FileUtil::FakeURI","Grizzled/FileUtil/FakeURI.html#method-i-method_missing","(meth, *args, &block)",""],["method_missing","Grizzled::Forwarder","Grizzled/Forwarder.html#method-c-method_missing","(m, *args, &block)",""],["method_missing","WrapMany","WrapMany.html#method-i-method_missing","(meth, *args, &block)",""],["new","Grizzled::FileUtil::BadDirectoryTreeValue","Grizzled/FileUtil/BadDirectoryTreeValue.html#method-c-new","(key, value)",""],["new","Grizzled::FileUtil::FakeURI","Grizzled/FileUtil/FakeURI.html#method-c-new","(path)",""],["new","Grizzled::FileUtil::FileIterator","Grizzled/FileUtil/FileIterator.html#method-c-new","(paths)",""],["new","Grizzled::FileUtil::IncludeSource","Grizzled/FileUtil/IncludeSource.html#method-c-new","(reader, uri)",""],["new","Grizzled::FileUtil::Includer","Grizzled/FileUtil/Includer.html#method-c-new","(source, options={})","<p>Initialize a new <code>Includer</code>.\n<p>Parameters:\n<p>source &mdash; A string, representing a file name or URL (http, https or …\n"],["new","Grizzled::Stack","Grizzled/Stack.html#method-c-new","(pop_empty_nil=true)","<p>Initialize a new stack.\n<p>Parameters:\n<p>pop_empty_nil &mdash; <code>true</code> if popping an empty stack should just return\n<code>nil</code> …\n"],["new","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-c-new","(resolver, options={})","<p>Initializer.\n<p>Parameters:\n<p>resolver &mdash; A hash-like object that can take a variable name (via the +[]+ function) …\n"],["new","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-c-new","(resolver, options={})","<p>Initialize a new <code>UnixShellStringTemplate</code>. Supports various\nhash options.\n<p>Parameters:\n<p>resolver &mdash; A hash-like …\n"],["new","Grizzled::String::Template::Variable","Grizzled/String/Template/Variable.html#method-c-new","(istart, iend, name, default=nil)",""],["new","Grizzled::String::Template::WindowsCmdStringTemplate","Grizzled/String/Template/WindowsCmdStringTemplate.html#method-c-new","(resolver, options={})","<p>Initialize a new <code>WindowsCmdStringTemplate</code>. Supports various\nhash options.\n<p>Parameters:\n<p>resolver &mdash; A hash-like …\n"],["new","Grizzled::Unix::User","Grizzled/Unix/User.html#method-c-new","(id)","<p>Initialize a new user. The <code>id</code> parameter is either a user name\n(string) or a UID (integer).\n"],["new","WrapMany","WrapMany.html#method-c-new","(*args)",""],["path","Grizzled::FileUtil::Includer","Grizzled/FileUtil/Includer.html#method-i-path","()","<p>Return the path of the original include file, if defined. If the original\nsource was a URL, the URL is …\n"],["pop","Grizzled::Stack","Grizzled/Stack.html#method-i-pop","()","<p>Pop the top element from the stack. If the stack is empty, this method\nthrows a <code>StackUnderflowException</code> …\n"],["pop_all","Grizzled::Stack","Grizzled/Stack.html#method-i-pop_all","()","<p>Pop every element of the stack, returning the results as an array and\nclearing the stack.\n"],["pre_sub","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-pre_sub","(s)","<p>Kludge to handle escaped “$”. Temporarily replace it with something highly\nunlikely to be in …\n"],["pre_sub","Grizzled::String::Template::WindowsCmdStringTemplate","Grizzled/String/Template/WindowsCmdStringTemplate.html#method-i-pre_sub","(s)","<p>Kludge to handle escaped “%”. Temporarily replace it with something highly\nunlikely to be in …\n"],["push","Grizzled::Stack","Grizzled/Stack.html#method-i-push","(element)","<p>Push an element or an array of elements onto the stack. Returns the stack\nitself, to allow chaining. …\n"],["run_as","Grizzled::Unix::User","Grizzled/Unix/User.html#method-i-run_as","(&block)","<p>Run a block of code as this user.\n<p>Parameters:\n<p>block &mdash; the block to execute as that user. It will receive …\n"],["substitute","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-i-substitute","(s)","<p>Replace all variable references in the given string. Variable references\nare recognized per the regular …\n"],["substitute","Grizzled::String::Template::UnixShellStringTemplate","Grizzled/String/Template/UnixShellStringTemplate.html#method-i-substitute","(s)","<p>Replace all variable references in the given string. Variable references\nare recognized per the regular …\n"],["substitute","Grizzled::String::Template::WindowsCmdStringTemplate","Grizzled/String/Template/WindowsCmdStringTemplate.html#method-i-substitute","(s)","<p>Replace all variable references in the given string. Variable references\nare recognized per the regular …\n"],["substitute_variable","Grizzled::String::Template::TemplateBase","Grizzled/String/Template/TemplateBase.html#method-i-substitute_variable","(var, s)",""],["to_a","Grizzled::Stack","Grizzled/Stack.html#method-i-to_a","()","<p>Return the stack as an array.\n"],["to_s","Grizzled::String::Template::Variable","Grizzled/String/Template/Variable.html#method-i-to_s","()",""],["unzip","Grizzled::FileUtil::ZipUtil::UnzipMixin","Grizzled/FileUtil/ZipUtil/UnzipMixin.html#method-i-unzip","(zip_file, directory, options = {}, &select)","<p>Unzips a zip file into a directory.\n<p>Parameters:\n<p>zip_file &mdash; The zip file to unzip.\n"],["walk","Dir","Dir.html#method-c-walk","(dirname, &block)","<p>Adds a <code>walk</code> method to the standard Ruby <code>Dir</code>\nclass. <code>walk</code> walks a directory tree, starting at\n<em>dirname</em>, …\n"],["walk","Grizzled::Directory","Grizzled/Directory.html#method-c-walk","(dirname, &block)","<p>Walk a directory tree, starting at <code>dirname</code>, invoking the\nsupplied block on each directory. The block …\n"],["zip","Grizzled::FileUtil::ZipUtil::ZipMixin","Grizzled/FileUtil/ZipUtil/ZipMixin.html#method-i-zip","(zip_file, directory, options = {}, &select)","<p>Create a zip file from the contents of a directory.\n<p>Parameters:\n<p>zip_file &mdash; The zip file to open. The file …\n"],["zip_file_entries","Grizzled::FileUtil::ZipUtil::UnzipMixin","Grizzled/FileUtil/ZipUtil/UnzipMixin.html#method-i-zip_file_entries","(zip_file, &block)","<p>Call a given block with the list of entries in a zip file, without\nextracting them.\n<p>Parameters:\n<p>zip_file … &mdash; "]]}}